generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

enum ColumnTaskType {
  GENERATION
  EXTRACTION
  CLASSIFICATION
  OTHERS
}

enum ColumnDataType {
  TEXT
  NUMBER
  DATE
  TIME
  BOOLEAN
  LIST
  OBJECT
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  otp           String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  members       Member[]
  sheets        Sheet[]
  sources       Source[]
}

model Organization {
  id                String             @id @default(cuid())
  name              String
  apiKey            String             @unique @default(uuid())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  members           Member[]
  sheets            Sheet[]
  sources           Source[]
  sheetSources      SheetSource[]
  sheetColumns      SheetColumn[]
  sheetColumnValues SheetColumnValue[]
  indexedSources    IndexedSource[]
}

model Member {
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  role           Role

  @@id([userId, organizationId])
}

model Sheet {
  id                String             @id @default(uuid())
  name              String
  createdById       String
  createdBy         User               @relation(fields: [createdById], references: [id])
  organizationId    String
  organization      Organization       @relation(fields: [organizationId], references: [id])
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  sheetSources      SheetSource[]
  sheetColumns      SheetColumn[]
  sheetColumnValues SheetColumnValue[]
}

model Source {
  id             String          @id @default(uuid())
  fileName       String
  fileType       String
  nickName       String
  isIndexed      Boolean         @default(false)
  isIndexing     Boolean         @default(false)
  indexRunCount  Int             @default(0)
  organizationId String
  organization   Organization    @relation(fields: [organizationId], references: [id])
  uploadedById   String
  uploadedBy     User            @relation(fields: [uploadedById], references: [id])
  createdAt      DateTime        @default(now())
  sheets         SheetSource[]
  indexedSources IndexedSource[]
}

model SheetSource {
  id             String             @id @default(uuid())
  sheetId        String
  sheet          Sheet              @relation(fields: [sheetId], references: [id])
  sourceId       String
  source         Source             @relation(fields: [sourceId], references: [id])
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id])
  rowValues      SheetColumnValue[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model SheetColumn {
  id             String             @id @default(uuid())
  sheetId        String
  sheet          Sheet              @relation(fields: [sheetId], references: [id])
  organizationId String
  organization   Organization       @relation(fields: [organizationId], references: [id])
  name           String
  instruction    String
  taskType       ColumnTaskType
  dataType       ColumnDataType
  defaultValue   String             @default("N/A")
  columnValues   SheetColumnValue[]
  createdAt      DateTime           @default(now())
  updatedAt      DateTime           @updatedAt
}

model SheetColumnValue {
  sheetId         String
  sheet           Sheet          @relation(fields: [sheetId], references: [id])
  sheetColumnId   String
  sheetColumn     SheetColumn    @relation(fields: [sheetColumnId], references: [id])
  organizationId  String
  organization    Organization   @relation(fields: [organizationId], references: [id])
  value           String?
  sheetSourceId   String
  sheetSource     SheetSource    @relation(fields: [sheetSourceId], references: [id])
  indexedSourceId String?
  indexedSource   IndexedSource? @relation(fields: [indexedSourceId], references: [id])
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@id([sheetColumnId, sheetSourceId])
}

model IndexedSource {
  id                     String             @id @default(uuid())
  indexId                String
  referenceImageFileName String?
  referenceText          String?
  sourceId               String
  source                 Source             @relation(fields: [sourceId], references: [id])
  organizationId         String
  organization           Organization       @relation(fields: [organizationId], references: [id])
  createdAt              DateTime           @default(now())
  updatedAt              DateTime           @updatedAt
  sheetColumnValues      SheetColumnValue[]
}
